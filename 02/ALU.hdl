/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yâ€“x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book.
 * Alex Von Hoene	07 Dec 2012
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if f == 1) or out = x & y (if f == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    ////ZERO INPUT IF zx OR zy////
    Not(in=zx, out=xNotZ);
	And16x1(x=xNotZ, y=x, out=x1);
	
	Not(in=zy, out=yNotZ);
    And16x1(x=yNotZ, y=y, out=y1);
    
    ////NEGATE INPUT IF nx OR ny////
    //With an Xor gate, if x=0, out=y, ifx=1, out=!y
    Xor16(a=x1, b=nx, out=x2);
    Xor16(a=y1, b=ny, out=y2);
	
	////ADD x and y////
	Add16(a=x2, b=y2, out=addXY);
	
	////AND x and y////
	And16(x=x2, y=y2, out=andXY);
	
	////EITHER addXY OR andXY goes out, based on f////
	Mux16(a=andXY, b=addXY, sel=f, out=fXY);
	
	////NEGATE THE OUTPUT IF no////
	Not16(in=fXY, out=nfXY);
	Mux16(a=fXY, b=nfXY, sel=no, out=out);
	
	////PRODUCE ANOTHER OUTPUT FOR TESTING////
	Mux16(a=fXY, b=nfXY, sel=no, out=outCopy);
	
	////IS THE OUTPUT == 0?////
	Zero(in=outCopy, out=zr);
	
	////IS THE OUTPUT < 0?////
	Negative(in=outCopy, out=ng);
}
