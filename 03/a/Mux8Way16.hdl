/**
 * 8-way 16-bit multiplexor.  
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 * Alex Von Hoene	28 Nov 2012
 */
 
 /*
  * sel[2]	sel[1]	sel[0]	selected data
  *		0		0		0		a
  *		0		0		1		b
  *		0		1		0		c
  *		0		1		1		d
  *		1		0		0		e
  *		1		0		1		f
  *		1		1		0		g
  *		1		1		1		h
  */
 


CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    
    ////DETERMINE WHICH DATA WAS SELECTED////
    //if sel[0] is false, then a, c, e, or g is selected
    Not(in=sel[0], out=aceg);
    //if sel[1] is false, then a, b, e, or f is selected
    Not(in=sel[1], out=abef);
    //if sel[2] is false, then a, b, c, or d is selected
    Not(in=sel[2], out=abcd);
    
    //a is selected if sel[0] is false and sel[1] is false and sel[2] is false
    And3(a=aceg, b=abef, c=abcd, out=aIsSel);
    //b is selected if sel[0] is true and sel[1] is false and sel[2] is false
    And3(a=sel[0], b=abef, c=abcd, out=bIsSel);
    //c is selected if sel[0] is false and sel[1] true is and sel[2] is false
    And3(a=aceg, b=sel[1], c=abcd, out=cIsSel);
    //d is selected if sel[0] is true and sel[1] is true and sel[2] is false
    And3(a=sel[0], b=sel[1], c=abcd, out=dIsSel);
    //e is selected if sel[0] is false and sel[1] is false and sel[2] is true
    And3(a=aceg, b=abef, c=sel[2], out=eIsSel);
    //f is selected if sel[0] is true and sel[1] is false and sel[2] is true
    And3(a=sel[0], b=abef, c=sel[2], out=fIsSel);
    //g is selected if sel[0] is false and sel[1] is true and sel[2] is true
    And3(a=aceg, b=sel[1], c=sel[2], out=gIsSel);
    //h is selected if sel[0] is true and sel[1] is true and sel[2] is true
    And3(a=sel[0], b=sel[1], c=sel[2], out=hIsSel);
    
    ////KILL NON-SELECTED BITS////
    AndSwitch(in=aIsSel, b=a, out=aBits);
    AndSwitch(in=bIsSel, b=b, out=bBits);
    AndSwitch(in=cIsSel, b=c, out=cBits);
    AndSwitch(in=dIsSel, b=d, out=dBits);
    AndSwitch(in=eIsSel, b=e, out=eBits);
    AndSwitch(in=fIsSel, b=f, out=fBits);
    AndSwitch(in=gIsSel, b=g, out=gBits);
    AndSwitch(in=hIsSel, b=h, out=hBits);
    
    ////BRING BITS FORWARD////
    Or16(a=aBits, b=bBits, out=aorB);
    Or16(a=cBits, b=dBits, out=corD);
    Or16(a=eBits, b=fBits, out=eorF);
    Or16(a=gBits, b=hBits, out=gorH);
    
    Or16(a=aorB, b=corD, out=aorBorCorD);
    Or16(a=eorF, b=gorH, out=eorForGorH);
    
    Or16(a=aorBorCorD, b=eorForGorH, out=out);
}
